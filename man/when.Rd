% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/when.R
\name{when}
\alias{when}
\alias{arrange_when}
\alias{distinct_when}
\alias{filter_when}
\alias{group_by_when}
\alias{mutate_when}
\alias{select_when}
\alias{summarise_when}
\alias{transmute_when}
\title{Evaluate When}
\usage{
arrange_when(.data, .eval, ...)

distinct_when(.data, .eval, ...)

filter_when(.data, .eval, ...)

group_by_when(.data, .eval, ...)

mutate_when(.data, .eval, ...)

select_when(.data, .eval, ...)

summarise_when(.data, .eval, ...)

transmute_when(.data, .eval, ...)
}
\arguments{
\item{.data}{A Spark \code{DataFrame} or a \code{data.frame}.}

\item{.eval}{A \code{formula()}. The LHS is the predicate to evaluate. When it evaluates to \code{TRUE}, the RHS will be
performed in the context of the function. The RHS can be in one of several forms:
\itemize{
\item An expression, e.g. \code{x * y}
\item A named expression, e.g. \code{c(z = x * y)}
\item A vector or \code{list} of the above.
}

Note: named expressions must be wrapped in \code{c()} or \code{list()}.}

\item{...}{Additional parameters to pass to the dplyr function.}
}
\value{
A Spark \code{DataFrame} or a \code{data.frame} depending on the input, \code{.data}.
}
\description{
Evaluate expressions against a Spark \code{DataFrame} (or \code{data.frame}) if a predicate evaluates to \code{TRUE}. Note that
these functions are subtly different from the scoped variants of dplyr functions in that they can evaluate any
predicate.
}
\examples{
# Unname expressions will return columns with the expression as the name
mtcars \%>\% mutate_when("cyl" \%in\% colnames(mtcars) ~ mpg * 2)

# But we can name them easily enough
mtcars \%>\% mutate_when("cyl" \%in\% colnames(mtcars) ~ c(mpg2 = mpg * 2))

# We can evaluate multiple expressions
mtcars \%>\%
  mutate_when("cyl" \%in\% colnames(mtcars) ~ c(mpg2 = mpg * 2, mpg4 = mpg * 2))

# We can still use functionality such as tidy-select
mtcars \%>\%
  select_when("cyl" \%in\% colnames(mtcars) ~ c(Cylinders = cyl, everything()))

}
